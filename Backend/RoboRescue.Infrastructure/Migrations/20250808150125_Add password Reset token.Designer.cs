// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoboRescue.Infrastructure;

#nullable disable

namespace RoboRescue.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250808150125_Add password Reset token")]
    partial class AddpasswordResettoken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AS_KS_SC_UTF8")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RoboRescue.Domain.CodeAnalyzers.CodeAnalyzer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassCount")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("HasAbstractClass")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasAbstractMethods")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasComposition")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasConstructorOverloading")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasEncapsulation")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasFinalMembers")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasGenerics")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasInheritance")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasInterfaceImplementation")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasMethodOverloading")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasPolymorphism")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasPrivateMembers")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasProtectedMembers")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("HasStaticMembers")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<int>("InterfaceCount")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("CodeAnalyzer");
                });

            modelBuilder.Entity("RoboRescue.Domain.EmailTokens.EmailToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTimeOffset>("ExpiredAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsUsed")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailToken");
                });

            modelBuilder.Entity("RoboRescue.Domain.Levels.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodeAnalyzerId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DependentOnLevelId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EnDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EnSuccessMessage")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EnTask")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("LevelNumber")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("SectionId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SuccessMessage")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Task")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CodeAnalyzerId");

                    b.HasIndex("DependentOnLevelId");

                    b.HasIndex("SectionId");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("RoboRescue.Domain.PasswordResetTokens.PasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiredAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsUsed")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<string>("PasswordToken")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetToken");
                });

            modelBuilder.Entity("RoboRescue.Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Expired")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsUsed")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserSecurityHash")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("RoboRescue.Domain.Sections.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EnDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("SectionNumber")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("RoboRescue.Domain.UserLevels.UserLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("LevelId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLevel");
                });

            modelBuilder.Entity("RoboRescue.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("BirthDate")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FcmToken")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTimeOffset?>("IsActive")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("RoboRescue.Domain.EmailTokens.EmailToken", b =>
                {
                    b.HasOne("RoboRescue.Domain.Users.User", "User")
                        .WithMany("EmailTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoboRescue.Domain.Levels.Level", b =>
                {
                    b.HasOne("RoboRescue.Domain.CodeAnalyzers.CodeAnalyzer", "CodeAnalyzer")
                        .WithMany("Levels")
                        .HasForeignKey("CodeAnalyzerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoboRescue.Domain.Levels.Level", "DependentOnLevel")
                        .WithMany()
                        .HasForeignKey("DependentOnLevelId");

                    b.HasOne("RoboRescue.Domain.Sections.Section", "Section")
                        .WithMany("Levels")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeAnalyzer");

                    b.Navigation("DependentOnLevel");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("RoboRescue.Domain.PasswordResetTokens.PasswordResetToken", b =>
                {
                    b.HasOne("RoboRescue.Domain.Users.User", "User")
                        .WithMany("PasswordResetTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoboRescue.Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.HasOne("RoboRescue.Domain.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoboRescue.Domain.UserLevels.UserLevel", b =>
                {
                    b.HasOne("RoboRescue.Domain.Levels.Level", "Level")
                        .WithMany("UserLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoboRescue.Domain.Users.User", "User")
                        .WithMany("UserSections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoboRescue.Domain.CodeAnalyzers.CodeAnalyzer", b =>
                {
                    b.Navigation("Levels");
                });

            modelBuilder.Entity("RoboRescue.Domain.Levels.Level", b =>
                {
                    b.Navigation("UserLevels");
                });

            modelBuilder.Entity("RoboRescue.Domain.Sections.Section", b =>
                {
                    b.Navigation("Levels");
                });

            modelBuilder.Entity("RoboRescue.Domain.Users.User", b =>
                {
                    b.Navigation("EmailTokens");

                    b.Navigation("PasswordResetTokens");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserSections");
                });
#pragma warning restore 612, 618
        }
    }
}
